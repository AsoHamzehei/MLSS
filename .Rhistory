df_rugs[,"lon"]
df_rugs <- rbind(df_rugs_multi, df_rugs_single)
df_rugs <- rbind(df_rugs_multi, df_rugs_single)
df_rugs[,"lon"]
df_rugs[, 5] <- round(df_rugs[, 5], 5)
df_rugs[, 6] <- round(df_rugs[, 6], 5)
df_rugs[,"lon"]
write.csv(df_mlssnames, file ="./data/mlss_updated.csv", row.names=F)
df_rugs_subset <- df_rugs[row_subset, ]
## Create and config map_base
map_base <- rMaps::Leaflet$new()
map_base$params$width <- map_width
map_base$params$height <- map_height
map_base$tileLayer(provider = map_type)
map_base$setView(c(geo_center$lat, geo_center$lon), map_zoom)
## Add markers one by one
for (n_rugs in 1:nrow(df_rugs_subset)) {
tmp_city <- paste0(df_rugs_subset[n_rugs,]$City)
tmp_name <- paste0(df_rugs_subset[n_rugs,]$Name, " (", df_rugs_subset[n_rugs,]$Email, ")")
map_base$marker(c(df_rugs_subset[n_rugs, ]$lat, df_rugs_subset[n_rugs, ]$lon), bindPopup = tmp_name)
}
map_base
df_rugs[, 5] <- round(df_rugs[, 5], 3)
df_rugs[, 6] <- round(df_rugs[, 6], 3)
write.csv(df_mlssnames, file ="./data/mlss_updated.csv", row.names=F)
df_rugs_subset <- df_rugs[row_subset, ]
## Create and config map_base
map_base <- rMaps::Leaflet$new()
map_base$params$width <- map_width
map_base$params$height <- map_height
map_base$tileLayer(provider = map_type)
map_base$setView(c(geo_center$lat, geo_center$lon), map_zoom)
## Add markers one by one
for (n_rugs in 1:nrow(df_rugs_subset)) {
tmp_city <- paste0(df_rugs_subset[n_rugs,]$City)
tmp_name <- paste0(df_rugs_subset[n_rugs,]$Name, " (", df_rugs_subset[n_rugs,]$Email, ")")
map_base$marker(c(df_rugs_subset[n_rugs, ]$lat, df_rugs_subset[n_rugs, ]$lon), bindPopup = tmp_name)
}
map_base
?jitter
df_rugs_multi[,"lat"]<-jitter(df_rugs_multi[,"lat"], factor=0.1)
df_rugs_multi[,"lon"]<-jitter(df_rugs_multi[,"lon"], factor=0.1)
name_dup <- df_mlssnames[which(duplicated(df_mlssnames$City)), ]$City
row_dup <- which(df_mlssnames$City %in% name_dup)
df_rugs_multi <- df_mlssnames[row_dup, ]
df_rugs_single <- df_mlssnames[-row_dup, ]
df_rugs_multi[,"lat"]<-jitter(df_rugs_multi[,"lat"], factor=0.1)
df_rugs_multi[,"lon"]<-jitter(df_rugs_multi[,"lon"], factor=0.1)
## Create the final df_rugs
df_rugs <- rbind(df_rugs_multi, df_rugs_single)
df_rugs[, 5] <- round(df_rugs[, 5], 3)
df_rugs[, 6] <- round(df_rugs[, 6], 3)
write.csv(df_mlssnames, file ="./data/mlss_updated.csv", row.names=F)
df_rugs[,5]
df_rugs[,6]
df_rugs_subset <- df_rugs[row_subset, ]
## Create and config map_base
map_base <- rMaps::Leaflet$new()
map_base$params$width <- map_width
map_base$params$height <- map_height
map_base$tileLayer(provider = map_type)
map_base$setView(c(geo_center$lat, geo_center$lon), map_zoom)
## Add markers one by one
for (n_rugs in 1:nrow(df_rugs_subset)) {
tmp_city <- paste0(df_rugs_subset[n_rugs,]$City)
tmp_name <- paste0(df_rugs_subset[n_rugs,]$Name, " (", df_rugs_subset[n_rugs,]$Email, ")")
map_base$marker(c(df_rugs_subset[n_rugs, ]$lat, df_rugs_subset[n_rugs, ]$lon), bindPopup = tmp_name)
}
map_base
name_dup <- df_mlssnames[which(duplicated(df_mlssnames$City)), ]$City
row_dup <- which(df_mlssnames$City %in% name_dup)
df_rugs_multi <- df_mlssnames[row_dup, ]
df_rugs_single <- df_mlssnames[-row_dup, ]
df_rugs_multi[,"lat"]<-jitter(df_rugs_multi[,"lat"], factor=0.01)
df_rugs_multi[,"lon"]<-jitter(df_rugs_multi[,"lon"], factor=0.01)
## Create the final df_rugs
df_rugs <- rbind(df_rugs_multi, df_rugs_single)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Write the final table to CSV
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_rugs[, 5] <- round(df_rugs[, 5], 3)
df_rugs[, 6] <- round(df_rugs[, 6], 3)
write.csv(df_mlssnames, file ="./data/mlss_updated.csv", row.names=F)
df_rugs_subset <- df_rugs[row_subset, ]
## Create and config map_base
map_base <- rMaps::Leaflet$new()
map_base$params$width <- map_width
map_base$params$height <- map_height
map_base$tileLayer(provider = map_type)
map_base$setView(c(geo_center$lat, geo_center$lon), map_zoom)
## Add markers one by one
for (n_rugs in 1:nrow(df_rugs_subset)) {
tmp_city <- paste0(df_rugs_subset[n_rugs,]$City)
tmp_name <- paste0(df_rugs_subset[n_rugs,]$Name, " (", df_rugs_subset[n_rugs,]$Email, ")")
map_base$marker(c(df_rugs_subset[n_rugs, ]$lat, df_rugs_subset[n_rugs, ]$lon), bindPopup = tmp_name)
}
map_base
create_map
create_map <- function(map_region = NULL,
map_country = NULL,
map_zoom = 2,
map_type = 'Acetate.all',  # Esri.WorldGrayCanvas, OpenStreetMap.BlackAndWhite
map_width = 1100,
map_height = 600) {
## Load Data
df_rugs <- read.csv("./data/mlss_updated.csv", stringsAsFactors=FALSE)
## Define map center and record needed
if (is.null(map_region) & is.null(map_country)) {
geo_center <- set_center('all')
row_subset <- 1:nrow(df_rugs)
} else if (is.null(map_region)) {
geo_center <- set_center(map_country)
row_subset <- which(df_rugs$Country %in% map_country)
} else if (is.null(map_country)) {
geo_center <- set_center(map_region)
row_subset <- which(df_rugs$Region %in% map_region)
}
## Subset df_rugs
df_rugs_subset <- df_rugs[row_subset, ]
## Create and config map_base
map_base <- rMaps::Leaflet$new()
map_base$params$width <- map_width
map_base$params$height <- map_height
map_base$tileLayer(provider = map_type)
map_base$setView(c(geo_center$lat, geo_center$lon), map_zoom)
## Add markers one by one
for (n_rugs in 1:nrow(df_rugs_subset)) {
tmp_city <- paste0(df_rugs_subset[n_rugs,]$City)
tmp_name <- paste0(df_rugs_subset[n_rugs,]$Name, " (", df_rugs_subset[n_rugs,]$Email, ")")
map_base$marker(c(df_rugs_subset[n_rugs, ]$lat, df_rugs_subset[n_rugs, ]$lon), bindPopup = tmp_name)
}
## Return map_base
return(map_base)
}
create_map
output$map_all <- renderUI({
## Create map_base
map_base <- create_map(NULL, NULL, 2)
## Generate HTML code, fix invalid multibyte strings and return
html_out <- HTML(map_base$html(chartId = "map_all"))
html_out <- fix_mbs(html_out)
html_out
})
source('~/Desktop/MLSS15/List/rugsmaps/server.R')
output
set_center <- function(loc = 'all') {
if (loc == 'all') return(data.frame(lon = 10, lat = 15))
## By Region
if (loc == 'Asia') return(data.frame(lon = 105, lat = 20))
if (loc == 'Europe') return(data.frame(lon = 22, lat = 50))
if (loc == 'North America') return(data.frame(lon = -100, lat = 40.5))
if (loc == 'Middle East or Africa') return(data.frame(lon = 20, lat = 0))
if (loc == 'Oceania') return(data.frame(lon = 143.5, lat = -31))
if (loc == 'South or Central America') return(data.frame(lon = -70, lat = -18))
## By Country (>= 5 groups)
if (loc == 'Australia') return(data.frame(lon = 131.5, lat = -30))
if (loc == 'Canada') return(data.frame(lon = -100, lat = 48))
if (loc == 'Germany') return(data.frame(lon = 10, lat = 51))
if (loc == 'India') return(data.frame(lon = 77, lat = 20))
if (loc == 'Japan') return(data.frame(lon = 135.5, lat = 36.5))
if (loc == 'United Kingdom') return(data.frame(lon = -3.5, lat = 54))
if (loc == 'United States') return(data.frame(lon = -100, lat = 35))
}
create_map <- function(map_region = NULL,
map_country = NULL,
map_zoom = 2,
map_type = 'Acetate.all',  # Esri.WorldGrayCanvas, OpenStreetMap.BlackAndWhite
map_width = 1100,
map_height = 600) {
## Load Data
df_rugs <- read.csv("./data/mlss_updated.csv", stringsAsFactors=FALSE)
## Define map center and record needed
if (is.null(map_region) & is.null(map_country)) {
geo_center <- set_center('all')
row_subset <- 1:nrow(df_rugs)
} else if (is.null(map_region)) {
geo_center <- set_center(map_country)
row_subset <- which(df_rugs$Country %in% map_country)
} else if (is.null(map_country)) {
geo_center <- set_center(map_region)
row_subset <- which(df_rugs$Region %in% map_region)
}
## Subset df_rugs
df_rugs_subset <- df_rugs[row_subset, ]
## Create and config map_base
map_base <- rMaps::Leaflet$new()
map_base$params$width <- map_width
map_base$params$height <- map_height
map_base$tileLayer(provider = map_type)
map_base$setView(c(geo_center$lat, geo_center$lon), map_zoom)
## Add markers one by one
for (n_rugs in 1:nrow(df_rugs_subset)) {
tmp_city <- paste0(df_rugs_subset[n_rugs,]$City)
tmp_name <- paste0(df_rugs_subset[n_rugs,]$Name, " (", df_rugs_subset[n_rugs,]$Email, ")")
map_base$marker(c(df_rugs_subset[n_rugs, ]$lat, df_rugs_subset[n_rugs, ]$lon), bindPopup = tmp_name)
}
## Return map_base
return(map_base)
}
create_map()
renderUI({
## Create map_base
map_base <- create_map(NULL, NULL, 2)
## Generate HTML code, fix invalid multibyte strings and return
html_out <- HTML(map_base$html(chartId = "map_all"))
html_out <- fix_mbs(html_out)
html_out
})
source('~/Desktop/MLSS15/List/rugsmaps/server.R')
source('~/Desktop/MLSS15/List/rugsmaps/ui.R')
source('~/.active-rstudio-document')
source('~/Desktop/MLSS15/List/rugsmaps/server.R')
source('~/Desktop/MLSS15/List/rugsmaps/server.R')
source('~/.active-rstudio-document')
source('~/Desktop/MLSS15/List/rugsmaps/server.R')
fix_mbs <- function(x) iconv(enc2utf8(x), sub = "byte")
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## [Function]: Setting the approximate map center
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
set_center <- function(loc = 'all') {
if (loc == 'all') return(data.frame(lon = 10, lat = 15))
## By Region
if (loc == 'Asia') return(data.frame(lon = 105, lat = 20))
if (loc == 'Europe') return(data.frame(lon = 22, lat = 50))
if (loc == 'North America') return(data.frame(lon = -100, lat = 40.5))
if (loc == 'Middle East or Africa') return(data.frame(lon = 20, lat = 0))
if (loc == 'Oceania') return(data.frame(lon = 143.5, lat = -31))
if (loc == 'South or Central America') return(data.frame(lon = -70, lat = -18))
## By Country (>= 5 groups)
if (loc == 'Australia') return(data.frame(lon = 131.5, lat = -30))
if (loc == 'Canada') return(data.frame(lon = -100, lat = 48))
if (loc == 'Germany') return(data.frame(lon = 10, lat = 51))
if (loc == 'India') return(data.frame(lon = 77, lat = 20))
if (loc == 'Japan') return(data.frame(lon = 135.5, lat = 36.5))
if (loc == 'United Kingdom') return(data.frame(lon = -3.5, lat = 54))
if (loc == 'United States') return(data.frame(lon = -100, lat = 35))
}
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## [Main Function]: Create Leaflet rMaps
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
create_map <- function(map_region = NULL,
map_country = NULL,
map_zoom = 2,
map_type = 'Acetate.all',  # Esri.WorldGrayCanvas, OpenStreetMap.BlackAndWhite
map_width = 1100,
map_height = 600) {
## Load Data
df_rugs <- read.csv("./data/mlss_updated.csv", stringsAsFactors=FALSE)
## Define map center and record needed
if (is.null(map_region) & is.null(map_country)) {
geo_center <- set_center('all')
row_subset <- 1:nrow(df_rugs)
} else if (is.null(map_region)) {
geo_center <- set_center(map_country)
row_subset <- which(df_rugs$Country %in% map_country)
} else if (is.null(map_country)) {
geo_center <- set_center(map_region)
row_subset <- which(df_rugs$Region %in% map_region)
}
## Subset df_rugs
df_rugs_subset <- df_rugs[row_subset, ]
## Create and config map_base
map_base <- rMaps::Leaflet$new()
map_base$params$width <- map_width
map_base$params$height <- map_height
map_base$tileLayer(provider = map_type)
map_base$setView(c(geo_center$lat, geo_center$lon), map_zoom)
## Add markers one by one
for (n_rugs in 1:nrow(df_rugs_subset)) {
tmp_city <- paste0(df_rugs_subset[n_rugs,]$City)
tmp_name <- paste0(df_rugs_subset[n_rugs,]$Name, " (", df_rugs_subset[n_rugs,]$Email, ")")
map_base$marker(c(df_rugs_subset[n_rugs, ]$lat, df_rugs_subset[n_rugs, ]$lon), bindPopup = tmp_name)
}
## Return map_base
return(map_base)
}
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## [Output]: Interactive Map (All Groups)
output$map_all <- renderUI({
## Create map_base
map_base <- create_map(NULL, NULL, 2)
## Generate HTML code, fix invalid multibyte strings and return
html_out <- HTML(map_base$html(chartId = "map_all"))
html_out <- fix_mbs(html_out)
html_out
})
output<-list()
output$map_asia <- renderUI({
## Create map_base
map_base <- create_map(map_region = 'Asia', map_zoom = 4)
## Generate HTML code, fix invalid multibyte strings and return
html_out <- HTML(map_base$html(chartId = "map_asia"))
html_out <- fix_mbs(html_out)
html_out
})
output$map_all <- renderUI({
## Create map_base
map_base <- create_map(NULL, NULL, 2)
## Generate HTML code, fix invalid multibyte strings and return
html_out <- HTML(map_base$html(chartId = "map_all"))
html_out <- fix_mbs(html_out)
html_out
})
output
map_base <- create_map(NULL, NULL, 2)
mainPanel(
plotOutput("distPlot")
)
mainPanel(
plotOutput("map_base")
)
mainPanel(
plotOutput("map_base")
)
library(shiny)
shinyUI(drawmap(
mainPanel(
plotOutput("map_base")
)
))
shinyUI(fluidPage(
mainPanel(
plotOutput("map_base")
)
))
map_base
df_rugs[,5]
df_rugs[,6]
write.csv(df_mlssnames, file ="./data/mlss_updated.csv", row.names=F)
df_rugs <- read.csv("./data/mlss_updated.csv", stringsAsFactors=FALSE)
## Define map center and record needed
if (is.null(map_region) & is.null(map_country)) {
geo_center <- set_center('all')
row_subset <- 1:nrow(df_rugs)
} else if (is.null(map_region)) {
geo_center <- set_center(map_country)
row_subset <- which(df_rugs$Country %in% map_country)
} else if (is.null(map_country)) {
geo_center <- set_center(map_region)
row_subset <- which(df_rugs$Region %in% map_region)
}
## Subset df_rugs
df_rugs_subset <- df_rugs[row_subset, ]
## Create and config map_base
map_base <- rMaps::Leaflet$new()
map_base$params$width <- map_width
map_base$params$height <- map_height
map_base$tileLayer(provider = map_type)
map_base$setView(c(geo_center$lat, geo_center$lon), map_zoom)
## Add markers one by one
for (n_rugs in 1:nrow(df_rugs_subset)) {
tmp_city <- paste0(df_rugs_subset[n_rugs,]$City)
tmp_name <- paste0(df_rugs_subset[n_rugs,]$Name, " (", df_rugs_subset[n_rugs,]$Email, ")")
map_base$marker(c(df_rugs_subset[n_rugs, ]$lat, df_rugs_subset[n_rugs, ]$lon), bindPopup = tmp_name)
}
map_base
df_rugs[,6]
write.csv(df_rugs, file ="./data/mlss_updated.csv", row.names=F)
map_base <- create_map(NULL, NULL, 2)
map_base
df_rugs[,6]
mlssnames <- read.csv("./data/MLSS_contacts.csv", stringsAsFactors=FALSE)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Create a new dataframe and update lat/lon information
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_mlssnames <- data.frame(matrix(NA, nrow = nrow(mlssnames), ncol = (ncol(mlssnames) + 2)))
colnames(df_mlssnames) <- c(colnames(mlssnames), "lat", "lon")
df_mlssnames[, 1:4] <- mlssnames[,]
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Load cities databases from 'maps' package
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(maps)
data(world.cities)
australia.cities<-world.cities[which(world.cities[,2] %in% c("Australia", "Germany", "Switzerland")),]
data(us.cities)
#data(canada.cities)
df_cities <- rbind(australia.cities, us.cities)#, canada.cities)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Update Information (also using this step to cross check the original rugs table)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
for (n_row in 1:nrow(df_mlssnames)) {
row_match <- which(df_cities$name == df_mlssnames[n_row,]$City)
if (length(row_match) > 0) df_mlssnames[n_row, 5:6] <- df_cities[row_match, 4:5]
}
## Filter out the records that may need correct
print(df_rugs[which(is.na(df_rugs[,7])),])
print(df_mlssnames[which(is.na(df_mlssnames[,6])),])
library(ggmap)
tmp_geo <- geocode("Edinburgh")
df_mlssnames[6,c(5,6)]<-tmp_geo[c("lat", "lon")]
name_dup <- df_mlssnames[which(duplicated(df_mlssnames$City)), ]$City
row_dup <- which(df_mlssnames$City %in% name_dup)
df_rugs_multi <- df_mlssnames[row_dup, ]
df_rugs_single <- df_mlssnames[-row_dup, ]
df_rugs_multi[,"lat"]<-jitter(df_rugs_multi[,"lat"], factor=0.01)
df_rugs_multi[,"lon"]<-jitter(df_rugs_multi[,"lon"], factor=0.01)
## Create the final df_rugs
df_rugs <- rbind(df_rugs_multi, df_rugs_single)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Write the final table to CSV
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_rugs[, 5] <- round(df_rugs[, 5], 3)
df_rugs[, 6] <- round(df_rugs[, 6], 3)
write.csv(df_rugs, file ="./data/mlss_updated.csv", row.names=F)
map_base <- create_map(NULL, NULL, 2)
map_base
dim(df_rugs)
df_rugs
mlssnames <- read.csv("./data/MLSS_contacts.csv", stringsAsFactors=FALSE)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Create a new dataframe and update lat/lon information
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_mlssnames <- data.frame(matrix(NA, nrow = nrow(mlssnames), ncol = (ncol(mlssnames) + 2)))
colnames(df_mlssnames) <- c(colnames(mlssnames), "lat", "lon")
df_mlssnames[, 1:4] <- mlssnames[,]
library(maps)
data(world.cities)
australia.cities<-world.cities[which(world.cities[,2] %in% c("Australia", "Germany", "Switzerland")),]
australia.cities<-world.cities[which(world.cities[,2] %in% c("Australia", "Germany", "Switzerland")),]
data(us.cities)
#data(canada.cities)
df_cities <- rbind(australia.cities, us.cities)#, canada.cities)
for (n_row in 1:nrow(df_mlssnames)) {
row_match <- which(df_cities$name == df_mlssnames[n_row,]$City)
if (length(row_match) > 0) df_mlssnames[n_row, 5:6] <- df_cities[row_match, 4:5]
}
print(df_mlssnames[which(is.na(df_mlssnames[,6])),])
tmp_geo <- geocode("Edinburgh")
tmp_geo
df_mlssnames[df_mlssnames[,"City"]=="Edinburgh",c(5,6)]<-tmp_geo[c("lat", "lon")]
tmp_geo <- geocode("Edinburgh")
df_mlssnames[df_mlssnames[,"City"]=="Edinburgh",c(5,6)]<-tmp_geo[c("lat", "lon")]
tmp_geo <- geocode("New York")
df_mlssnames[df_mlssnames[,"City"]=="New York",c(5,6)]<-tmp_geo[c("lat", "lon")]
tmp_geo <- geocode("Berkeley")
df_mlssnames[df_mlssnames[,"City"]=="Berkeley",c(5,6)]<-tmp_geo[c("lat", "lon")]
name_dup <- df_mlssnames[which(duplicated(df_mlssnames$City)), ]$City
row_dup <- which(df_mlssnames$City %in% name_dup)
df_rugs_multi <- df_mlssnames[row_dup, ]
df_rugs_single <- df_mlssnames[-row_dup, ]
df_rugs_multi[,"lat"]<-jitter(df_rugs_multi[,"lat"], factor=0.01)
df_rugs_multi[,"lon"]<-jitter(df_rugs_multi[,"lon"], factor=0.01)
df_rugs_multi
df_rugs <- rbind(df_rugs_multi, df_rugs_single)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Write the final table to CSV
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_rugs[, 5] <- round(df_rugs[, 5], 3)
df_rugs[, 6] <- round(df_rugs[, 6], 3)
write.csv(df_rugs, file ="./data/mlss_updated.csv", row.names=F)
df_rugs
map_base <- create_map(NULL, NULL, 2)
map_base
shinyUI(fluidPage(
mainPanel(
plotOutput("map_base")
)
))
shinyapps::setAccountInfo(name='westa', token='5D7316DA005F6BF675298300BF8603E2', secret='1LvHvpqQvXZ3UzisoTXq3SfxxbzRQnVHMTvefU1v')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='westa',
token='5D7316DA005F6BF675298300BF8603E2',
secret='<SECRET>')
shinyapps::setAccountInfo(name='westa', token='5D7316DA005F6BF675298300BF8603E2', secret='1LvHvpqQvXZ3UzisoTXq3SfxxbzRQnVHMTvefU1v')
library(shinyapps)
library(shiny)
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
create_map(NULL,NULL,2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
shinyapps::deployApp('/Users/westa/Desktop/MLSS15/List/mlssmap')
setwd('/Users/westa/Desktop/MLSS15/List/mlssmap')
deployApp()
deployApp("mlss")
deployApp()
deployApp()
